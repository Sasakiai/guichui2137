package model;

/**
 * Holds the static tiles for the game board.
 */
public class BoardMap {
    private TileType[][] board;
    private final int rows = 31;
    private final int cols = 27;

    public BoardMap() {
        createMap();
    }

    /**
     * Initializes the board layout using a simple template.
     */
    private void createMap() {
        board = new TileType[rows][cols];

        int[][] template = {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,0},
                {0,2,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,0,0,0,2,0},
                {0,2,0,1,1,0,2,0,1,1,1,0,2,0,2,0,1,1,1,0,2,0,1,1,0,2,0},
                {0,2,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,0,0,0,2,0},
                {0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
                {0,2,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0},
                {0,2,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0},
                {0,2,2,2,2,2,2,0,0,2,2,2,2,0,2,2,2,2,0,0,2,2,2,2,2,2,0},
                {0,0,0,0,0,0,2,0,0,0,0,0,1,0,1,0,0,0,0,0,2,0,0,0,0,0,0},
                {1,1,1,1,1,0,2,0,0,0,0,0,1,0,1,0,0,0,0,0,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,0,0,1,1,1,1,1,1,1,1,1,0,0,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,0,0,1,0,1,0,1,0,1,0,1,0,0,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,0,0,1,0,1,1,1,1,1,0,1,0,0,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,0,0,1,0,1,1,1,1,1,0,1,0,0,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,0,0,1,0,1,0,1,0,1,0,1,0,0,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,0,0,1,1,1,1,1,1,1,1,1,0,0,2,0,1,1,1,1,1},
                {1,1,1,1,1,0,2,0,0,1,0,0,0,0,0,0,0,1,0,0,2,0,1,1,1,1,1},
                {0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0},
                {0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,0},
                {0,2,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,0,0,0,2,0},
                {0,2,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,0,0,0,2,0},
                {0,2,2,2,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,0,0,2,2,2,0},
                {0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0},
                {0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0},
                {0,2,2,2,2,2,2,0,0,2,2,2,2,0,2,2,2,2,0,0,2,2,2,2,2,2,0},
                {0,2,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0},
                {0,2,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0},
                {0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        };

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                switch (template[i][j]) {
                    case 0:
                        board[i][j] = TileType.WALL;
                        break;
                    case 1:
                        board[i][j] = TileType.EMPTY;
                        break;
                    case 2:
                        board[i][j] = TileType.DOT;
                        break;
                }
            }
        }
    }

    // zwraca typ kafelka na podanej pozycji (row,col) - np aby PacMan mógł sprawdzić czy to nie ściana
    public TileType getTileAt(int row, int col) {
        return board[row][col];
    }

    /**
     * Allows changing a tile when the player eats a dot.
     */
    public void setTileAt(int row, int col, TileType type) {
        board[row][col] = type;
    }

    /**
     * @return number of rows on the board
     */
    public int getRows() { return rows; }

    /**
     * @return number of columns on the board
     */
    public int getCols() { return cols; }

    /**
     * Checks whether any dots are still on the board.
     */
    public boolean hasDotsRemaining() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (board[i][j] == TileType.DOT) {
                    return true;
                }
            }
        }
        return false;
    }
}
